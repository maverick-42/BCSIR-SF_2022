
#include <ETH.h>
#include <WiFi.h>
#include <EEPROM.h>
#include <WiFiAP.h>
#include <WiFiSTA.h>
#include <WiFiUdp.h>
#include <WiFiScan.h>
#include <WiFiType.h>
#include <WiFiMulti.h>
#include <WiFiClient.h>
#include <WiFiServer.h>
#include <HTTPClient.h>
#include <WiFiGeneric.h>
#include <BluetoothSerial.h>

#include <SPI.h>
#include <HCSR04.h>
#include <MFRC522.h>
#include <AsyncTCP.h>
#include <Adafruit_MQTT.h>
#include <AsyncElegantOTA.h>
#include <ESPAsyncWebServer.h>
#include <Adafruit_MQTT_Client.h> 

/****************************************************************************************************************************************************************************************************************************************************************************/
/****************************************************************************************************************************************************************************************************************************************************************************/

String User_A = "F2DE1333";
String User_B = "E7728A7B";

byte readCard[4];
String tagID = "";

#define EEPROM_SIZE          12
#define Message_G           "Welcome to Bangladesh Road Transportation AFC System."
#define Message_B           "Please place your user card in front of the scanner..."
#define Message_I           "QR code invalid."
#define Message_A           "Available balance : "
#define Message_C           "Your current balance : "
#define Message_R           "Please recharge your card!"
#define Message_T           "Insufficient fund."
#define Message_S           "Account balance recharge successful!"
#define BDT                 " BDT."

int rstPIN = 22;
int ssPIN  =  5;
MFRC522 mfrc522(ssPIN, rstPIN);

int trigPIN = 17;  
int echoPIN = 21;
UltraSonicDistanceSensor ultrasonicSensor(trigPIN,echoPIN);


int route1  = 15;
int route2  = 20;
int route3  = 30;
int route4  = 35;
int route5  =  5;
int route6  = 15;
int route7  = 20;
int route8  = 15;
int route9  = 10;
int route10 = 15;
int route11 =  5;
int route12 = 20;
int route13 =  5;
int route14 = 10;
int route15 = 15;
int route16 = 30;
int route17 =  5;
int route18 = 15;
int route19 = 20;
int route20 = 35;

int route1_ticket  = 30;
int route2_ticket  = 40; 
int route3_ticket  = 60; 
int route4_ticket  = 70; 
int route5_ticket  = 10; 
int route6_ticket  = 30;
int route7_ticket  = 40;
int route8_ticket  = 25;
int route9_ticket  = 20;
int route10_ticket = 30;
int route11_ticket = 10;
int route12_ticket = 40;
int route13_ticket = 10;
int route14_ticket = 20;
int route15_ticket = 30;
int route16_ticket = 60;
int route17_ticket = 10;
int route18_ticket = 25;
int route19_ticket = 40;
int route20_ticket = 70;

/****************************************************************************************************************************************************************************************************************************************************************************/
/****************************************************************************************************************************************************************************************************************************************************************************/

//Adafruit.io Setup

#define AIO_SERVER      "io.adafruit.com"
#define AIO_SERVERPORT  1883                   
#define AIO_USERNAME   "_Maverick_"
#define AIO_KEY        "aio_lCfY25t7WnsYiGXNdHPNFGEGlDJj"

  
// BLUETOOTH CLIENT

#if !defined(CONFIG_BT_ENABLED) || !defined(CONFIG_BLUEDROID_ENABLED)
#error Bluetooth is not enabled! Please run
`make menuconfig` to and enable it
#endif

BluetoothSerial SerialBT;

int bluedata;

// WIFI CLIENT

#define WLAN_SSID       "TP-LINK_D8B6"
#define WLAN_PASS       "farhan2758"

WiFiClient client;

// MQTT CLIENT

Adafruit_MQTT_Client mqtt(&client, AIO_SERVER, AIO_SERVERPORT, AIO_USERNAME, AIO_KEY);
Adafruit_MQTT_Publish TTPAFC = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME"/feeds/TTPAFC"); 

void MQTT_connect();

AsyncWebServer server(80);
TaskHandle_t Loop0;

/****************************************************************************************************************************************************************************************************************************************************************************/
/****************************************************************************************************************************************************************************************************************************************************************************/

void setup() 
{
  Serial.begin(115200);
  delay(500);

  // Connection to WiFi access point. 
  {
  Serial.println();Serial.println();
  Serial.print("Connecting to ");
  Serial.println(WLAN_SSID);
  
  WiFi.mode(WIFI_STA);
  WiFi.begin(WLAN_SSID, WLAN_PASS);
  while (WiFi.status() != WL_CONNECTED) 
  {
    delay(500);
    Serial.print(".");
  }
  Serial.println();
  Serial.println("WiFi connected!");
  Serial.println("IP address: "); 
  Serial.println(WiFi.localIP());
  Serial.println();
  }
  
  // Connection to BLE access point.
  { 
  btStart();  
  Serial.println("Bluetooth On!");
  SerialBT.begin("ESP32_Bluetooth");
  Serial.println("The device started, now you can pair it with bluetooth!");
  Serial.println();
  }

  // Connection to ASYNC access point.
  { 
  AsyncElegantOTA.begin(&server);
  server.begin();
  Serial.println("ASYNC server started!");
  Serial.println();
  }
  
  SPI.begin();
  mfrc522.PCD_Init();

  EEPROM.begin(EEPROM_SIZE);
  EEPROM.put(0, 125);
  EEPROM.put(1, 0);
  EEPROM.put(2, 85);
    
 {
   xTaskCreatePinnedToCore(
                     Loop0code,
                     "Loop 0",
                     10000,
                     NULL,
                     1,
                     &Loop0,
                     0);                
 } 
}


/****************************************************************************************************************************************************************************************************************************************************************************/
/****************************************************************************************************************************************************************************************************************************************************************************/
/****************************************************************************************************************************************************************************************************************************************************************************/


void Loop0code( void * pvParameters ) {
  for(;;){         
          int distanceCm = ultrasonicSensor.measureDistanceCm(); 
          if (distanceCm <= 10)
           {
            SerialBT.println(50);            
        
            Serial.println(Message_G);
            Serial.println(Message_B);
 
            TTPAFC.publish(Message_G);
            TTPAFC.publish(Message_B);
            }
         delay(5000);   
        }
}


/****************************************************************************************************************************************************************************************************************************************************************************/
/****************************************************************************************************************************************************************************************************************************************************************************/
/****************************************************************************************************************************************************************************************************************************************************************************/


void loop() 
{
   MQTT_connect();

   int Available_Balance_A = EEPROM.read(0);
   int Available_Balance_X = EEPROM.read(2);
  
   while(SerialBT.available())
   {
    bluedata = SerialBT.parseInt();
    Serial.println();
    delay(20);
   
    if (bluedata == 0) {      
     Serial.println("Journey route not selected!");
           
     EEPROM.write(1, 0);
     EEPROM.commit();
      
     TTPAFC.publish("Journey route not selected!");
    }
   
   else if (bluedata == 1) {
      Serial.println("Journey selected from 'Uttara' to 'Mirpur-10'.");
      Serial.println("Ticket rate : 30 BDT."); 
      Serial.println("Swipe your card to pay the required amount. ");
      
      EEPROM.write(1, 1);
      EEPROM.commit();              

      TTPAFC.publish("Journey selected from 'Uttara' to 'Mirpur-10'.");  
      TTPAFC.publish("Ticket rate : 30 BDT."); 
      TTPAFC.publish("Swipe your card to pay the required amount. ");
   }
  
   else if (bluedata == 2) {
      Serial.println("Journey selected from 'Uttara' to 'Agargaon'.");
      Serial.println("Ticket rate : 40 BDT."); 
      Serial.println("Swipe your card to pay the required amount. ");              
      
      EEPROM.write(1, 2);
      EEPROM.commit();
      
      TTPAFC.publish("Journey selected from 'Uttara' to 'Agargaon'.");  
      TTPAFC.publish("Ticket rate : 40 BDT."); 
      TTPAFC.publish("Swipe your card to pay the required amount. "); 
     }

   else if (bluedata == 3) {
      Serial.println("Journey selected from 'Uttara' to 'Shahbag'.");
      Serial.println("Ticket rate : 60 BDT."); 
      Serial.println("Swipe your card to pay the required amount. ");              
      
      EEPROM.write(1, 3);
      EEPROM.commit();
      
      TTPAFC.publish("Journey selected from 'Uttara' to 'Shahbag'.");  
      TTPAFC.publish("Ticket rate : 60 BDT."); 
      TTPAFC.publish("Swipe your card to pay the required amount. "); 
     }            

   else if (bluedata == 4) {
      Serial.println("Journey selected from 'Uttara' to 'Motijheel'.");
      Serial.println("Ticket rate : 70 BDT."); 
      Serial.println("Swipe your card to pay the required amount. ");              
      
      EEPROM.write(1, 4);
      EEPROM.commit();
      
      TTPAFC.publish("Journey selected from 'Uttara' to 'Motijheel'.");  
      TTPAFC.publish("Ticket rate : 70 BDT."); 
      TTPAFC.publish("Swipe your card to pay the required amount. "); 
     }

   else if (bluedata == 5) {
      Serial.println("Journey selected from 'Mirpur-10' to 'Agargaon'.");
      Serial.println("Ticket rate : 10 BDT."); 
      Serial.println("Swipe your card to pay the required amount. ");              
      
      EEPROM.write(1, 5);
      EEPROM.commit();
      
      TTPAFC.publish("Journey selected from 'Mirpur-10' to 'Agargaon'.");  
      TTPAFC.publish("Ticket rate : 10 BDT."); 
      TTPAFC.publish("Swipe your card to pay the required amount. "); 
     }

   else if (bluedata == 6) {
      Serial.println("Journey selected from 'Mirpur-10' to 'Shahbag'.");
      Serial.println("Ticket rate : 30 BDT."); 
      Serial.println("Swipe your card to pay the required amount. ");              
      
      EEPROM.write(1, 6);
      EEPROM.commit();
      
      TTPAFC.publish("Journey selected from 'Mirpur-10' to 'Shahbag'.");  
      TTPAFC.publish("Ticket rate : 30 BDT."); 
      TTPAFC.publish("Swipe your card to pay the required amount. "); 
     }

    else if (bluedata == 7) {
      Serial.println("Journey selected from 'Mirpur-10' to 'Motijheel'.");
      Serial.println("Ticket rate : 40 BDT."); 
      Serial.println("Swipe your card to pay the required amount. ");              
      
      EEPROM.write(1, 7);
      EEPROM.commit();
      
      TTPAFC.publish("Journey selected from 'Mirpur-10' to 'Motijheel'.");  
      TTPAFC.publish("Ticket rate : 40 BDT."); 
      TTPAFC.publish("Swipe your card to pay the required amount. "); 
     }

    else if (bluedata == 8) {
      Serial.println("Journey selected from 'Mirpur-10' to 'Uttara'.");
      Serial.println("Ticket rate : 25 BDT."); 
      Serial.println("Swipe your card to pay the required amount. ");              
      
      EEPROM.write(1, 8);
      EEPROM.commit();
      
      TTPAFC.publish("Journey selected from 'Mirpur-10' to 'Uttara'.");  
      TTPAFC.publish("Ticket rate : 25 BDT."); 
      TTPAFC.publish("Swipe your card to pay the required amount. "); 
     }

    else if (bluedata == 9) {
      Serial.println("Journey selected from 'Agargaon' to 'Shahbag'.");
      Serial.println("Ticket rate : 20 BDT."); 
      Serial.println("Swipe your card to pay the required amount. ");              
      
      EEPROM.write(1, 9);
      EEPROM.commit();
      
      TTPAFC.publish("Journey selected from 'Agargaon' to 'Shahbag'.");  
      TTPAFC.publish("Ticket rate : 20 BDT."); 
      TTPAFC.publish("Swipe your card to pay the required amount. "); 
     }

    else if (bluedata == 10) {
      Serial.println("Journey selected from 'Agargaon' to 'Motijheel'.");
      Serial.println("Ticket rate : 30 BDT."); 
      Serial.println("Swipe your card to pay the required amount. ");              
      
      EEPROM.write(1, 10);
      EEPROM.commit();
      
      TTPAFC.publish("Journey selected from 'Agargaon' to 'Motijheel'.");  
      TTPAFC.publish("Ticket rate : 30 BDT."); 
      TTPAFC.publish("Swipe your card to pay the required amount. "); 
     }

    else if (bluedata == 11) {
      Serial.println("Journey selected from 'Agargaon' to 'Mirpur-10'.");
      Serial.println("Ticket rate : 10 BDT."); 
      Serial.println("Swipe your card to pay the required amount. ");              
      
      EEPROM.write(1, 11);
      EEPROM.commit();
      
      TTPAFC.publish("Journey selected from 'Agargaon' to 'Mirpur-10'.");  
      TTPAFC.publish("Ticket rate : 10 BDT."); 
      TTPAFC.publish("Swipe your card to pay the required amount. "); 
     }

    else if (bluedata == 12) {
      Serial.println("Journey selected from 'Agargaon' to 'Uttara'.");
      Serial.println("Ticket rate : 40 BDT."); 
      Serial.println("Swipe your card to pay the required amount. ");              
      
      EEPROM.write(1, 12);
      EEPROM.commit();
      
      TTPAFC.publish("Journey selected from 'Agargaon' to 'Uttara'.");  
      TTPAFC.publish("Ticket rate : 40 BDT."); 
      TTPAFC.publish("Swipe your card to pay the required amount. "); 
     }

     else if (bluedata == 13) {
      Serial.println("Journey selected from 'Shahbag' to 'Motijheel'.");
      Serial.println("Ticket rate : 10 BDT."); 
      Serial.println("Swipe your card to pay the required amount. ");              
      
      EEPROM.write(1, 13);
      EEPROM.commit();
      
      TTPAFC.publish("Journey selected from 'Shahbag' to 'Motijheel'.");  
      TTPAFC.publish("Ticket rate : 10 BDT."); 
      TTPAFC.publish("Swipe your card to pay the required amount. "); 
     }                                  

     else if (bluedata == 14) {
      Serial.println("Journey selected from 'Shahbag' to 'Agargaon'.");
      Serial.println("Ticket rate : 20 BDT."); 
      Serial.println("Swipe your card to pay the required amount. ");              
      
      EEPROM.write(1, 14);
      EEPROM.commit();
      
      TTPAFC.publish("Journey selected from 'Shahbag' to 'Agargaon'.");  
      TTPAFC.publish("Ticket rate : 20 BDT."); 
      TTPAFC.publish("Swipe your card to pay the required amount. "); 
     }

     else if (bluedata == 15) {
      Serial.println("Journey selected from 'Shahbag' to 'Mirpur-10'.");
      Serial.println("Ticket rate : 30 BDT."); 
      Serial.println("Swipe your card to pay the required amount. ");              
      
      EEPROM.write(1, 15);
      EEPROM.commit();
      
      TTPAFC.publish("Journey selected from 'Shahbag' to 'Mirpur-10'.");  
      TTPAFC.publish("Ticket rate : 30 BDT."); 
      TTPAFC.publish("Swipe your card to pay the required amount. "); 
     }

     else if (bluedata == 16) {
      Serial.println("Journey selected from 'Shahbag' to 'Uttara'.");
      Serial.println("Ticket rate : 60 BDT."); 
      Serial.println("Swipe your card to pay the required amount. ");              
      
      EEPROM.write(1, 16);
      EEPROM.commit();
      
      TTPAFC.publish("Journey selected from 'Shahbag' to 'Uttara'.");  
      TTPAFC.publish("Ticket rate : 60 BDT."); 
      TTPAFC.publish("Swipe your card to pay the required amount. "); 
     }

     else if (bluedata == 17) {
      Serial.println("Journey selected from 'Motijheel' to 'Shahbag'.");
      Serial.println("Ticket rate : 10 BDT."); 
      Serial.println("Swipe your card to pay the required amount. ");              
      
      EEPROM.write(1, 17);
      EEPROM.commit();
      
      TTPAFC.publish("Journey selected from 'Motijheel' to 'Shahbag'.");  
      TTPAFC.publish("Ticket rate : 10 BDT."); 
      TTPAFC.publish("Swipe your card to pay the required amount. "); 
     }

      else if (bluedata == 18) {
      Serial.println("Journey selected from 'Motijheel' to 'Agargaon'.");
      Serial.println("Ticket rate : 25 BDT."); 
      Serial.println("Swipe your card to pay the required amount. ");              
      
      EEPROM.write(1, 18);
      EEPROM.commit();
      
      TTPAFC.publish("Journey selected from 'Motijheel' to 'Agargaon'.");  
      TTPAFC.publish("Ticket rate : 25 BDT."); 
      TTPAFC.publish("Swipe your card to pay the required amount. "); 
     }

      else if (bluedata == 19) {
      Serial.println("Journey selected from 'Motijheel' to 'Mirpur-10'.");
      Serial.println("Ticket rate : 40 BDT."); 
      Serial.println("Swipe your card to pay the required amount. ");              
      
      EEPROM.write(1, 19);
      EEPROM.commit();
      
      TTPAFC.publish("Journey selected from 'Motijheel' to 'Mirpur-10'.");  
      TTPAFC.publish("Ticket rate : 40 BDT."); 
      TTPAFC.publish("Swipe your card to pay the required amount. "); 
     }

      else if (bluedata == 20) {
      Serial.println("Journey selected from 'Motijheel' to 'Uttara'.");
      Serial.println("Ticket rate : 70 BDT."); 
      Serial.println("Swipe your card to pay the required amount. ");              
      
      EEPROM.write(1, 20);
      EEPROM.commit();
      
      TTPAFC.publish("Journey selected from 'Motijheel' to 'Uttara'.");  
      TTPAFC.publish("Ticket rate : 70 BDT."); 
      TTPAFC.publish("Swipe your card to pay the required amount. "); 
     }                         
                            
   else if (bluedata == 21) {
      Serial.println("Passenger boarded at 'Shahbag' station.");
      Serial.println("Passenger Name : A ");              
        
      TTPAFC.publish("Passenger boarded at 'Shahbag' station.");
      TTPAFC.publish("Passenger Name : A "); 
      }
    else if (bluedata == 22) {
      Serial.println("Passenger boarded at 'Mirpur-10' station.");
      Serial.println("Passenger Name : B ");              
        
      TTPAFC.publish("Passenger boarded at 'Mirpur-10' station.");
      TTPAFC.publish("Passenger Name : B ");      
      }
    else if (bluedata == 23) {
      Serial.println("Passenger boarded at 'Uttara' station.");
      Serial.println("Passenger Name : A ");              
        
      TTPAFC.publish("Passenger boarded at 'Uttara' station.");
      TTPAFC.publish("Passenger Name : A ");           
      }
    else if (bluedata == 24) {
      Serial.println("Passenger boarded at 'Cantonment' station.");
      Serial.println("Passenger Name : B ");              
        
      TTPAFC.publish("Passenger boarded at 'Cantonment' station.");
      TTPAFC.publish("Passenger Name : B ");        
      }
    else if (bluedata == 25) {
      Serial.println(Message_I);
      TTPAFC.publish(Message_I);                    
      }   
   
    else if (bluedata == 50) {
      Serial.println("Student Pass.");
      Serial.println("Passenger Name : X ");              

      int route_x = EEPROM.read(1); 
        
      TTPAFC.publish("Student Pass.");
      TTPAFC.publish("Passenger Name : X "); 

        if(route_x == 0) {
          Serial.println("Journey route not selected!");
          TTPAFC.publish("Journey route not selected!");   
        }
        else if(route_x == 1) {
          
          int Balance_M = Available_Balance_X - route1 ;
          
          if(Balance_M >= 0){
          EEPROM.write(2, Balance_M);
          EEPROM.commit();
          String Balance_N = String(Balance_M);
          String Message_Q = Message_C + Balance_N + BDT;
          const char* Message_O = Message_Q.c_str(); 
          Serial.println(Message_O);
          TTPAFC.publish(Message_O);
          break; 
        }
        else
        {
          Serial.println(Message_T);
          Serial.println(Message_R);
                            
          TTPAFC.publish(Message_R);
          TTPAFC.publish(Message_T);                
        }
      }
      else if(route_x == 2) {
          
          int Balance_M = Available_Balance_X - route2 ;
          
          if(Balance_M >= 0){
          EEPROM.write(2, Balance_M);
          EEPROM.commit();
          String Balance_N = String(Balance_M);
          String Message_Q = Message_C + Balance_N + BDT;
          const char* Message_O = Message_Q.c_str(); 
          Serial.println(Message_O);
          TTPAFC.publish(Message_O);
          break; 
        }
        else
        {
          Serial.println(Message_T);
          Serial.println(Message_R);
                            
          TTPAFC.publish(Message_R);
          TTPAFC.publish(Message_T);                
        }      
      }
      else if(route_x == 3) {
          
          int Balance_M = Available_Balance_X - route3 ;
          
          if(Balance_M >= 0){
          EEPROM.write(2, Balance_M);
          EEPROM.commit();
          String Balance_N = String(Balance_M);
          String Message_Q = Message_C + Balance_N + BDT;
          const char* Message_O = Message_Q.c_str(); 
          Serial.println(Message_O);
          TTPAFC.publish(Message_O);
          break; 
        }
        else
        {
          Serial.println(Message_T);
          Serial.println(Message_R);
                            
          TTPAFC.publish(Message_R);
          TTPAFC.publish(Message_T);                
        }      
      }
      else if(route_x == 4) {
          
          int Balance_M = Available_Balance_X - route4 ;
          
          if(Balance_M >= 0){
          EEPROM.write(2, Balance_M);
          EEPROM.commit();
          String Balance_N = String(Balance_M);
          String Message_Q = Message_C + Balance_N + BDT;
          const char* Message_O = Message_Q.c_str(); 
          Serial.println(Message_O);
          TTPAFC.publish(Message_O);
          break; 
        }
        else
        {
          Serial.println(Message_T);
          Serial.println(Message_R);
                            
          TTPAFC.publish(Message_R);
          TTPAFC.publish(Message_T);                
        }      
      }
      else if(route_x == 5) {
          
          int Balance_M = Available_Balance_X - route5 ;
          
          if(Balance_M >= 0){
          EEPROM.write(2, Balance_M);
          EEPROM.commit();
          String Balance_N = String(Balance_M);
          String Message_Q = Message_C + Balance_N + BDT;
          const char* Message_O = Message_Q.c_str(); 
          Serial.println(Message_O);
          TTPAFC.publish(Message_O);
          break; 
        }
        else
        {
          Serial.println(Message_T);
          Serial.println(Message_R);
                            
          TTPAFC.publish(Message_R);
          TTPAFC.publish(Message_T);                
        }      
      }
      else if(route_x == 6) {
          
          int Balance_M = Available_Balance_X - route6 ;
          
          if(Balance_M >= 0){
          EEPROM.write(2, Balance_M);
          EEPROM.commit();
          String Balance_N = String(Balance_M);
          String Message_Q = Message_C + Balance_N + BDT;
          const char* Message_O = Message_Q.c_str(); 
          Serial.println(Message_O);
          TTPAFC.publish(Message_O);
          break; 
        }
        else
        {
          Serial.println(Message_T);
          Serial.println(Message_R);
                            
          TTPAFC.publish(Message_R);
          TTPAFC.publish(Message_T);                
        }      
      }
      else if(route_x == 7) {
          
          int Balance_M = Available_Balance_X - route7 ;
          
          if(Balance_M >= 0){
          EEPROM.write(2, Balance_M);
          EEPROM.commit();
          String Balance_N = String(Balance_M);
          String Message_Q = Message_C + Balance_N + BDT;
          const char* Message_O = Message_Q.c_str(); 
          Serial.println(Message_O);
          TTPAFC.publish(Message_O);
          break; 
        }
        else
        {
          Serial.println(Message_T);
          Serial.println(Message_R);
                            
          TTPAFC.publish(Message_R);
          TTPAFC.publish(Message_T);                
        }      
      }
      else if(route_x == 8) {
          
          int Balance_M = Available_Balance_X - route8 ;
          
          if(Balance_M >= 0){
          EEPROM.write(2, Balance_M);
          EEPROM.commit();
          String Balance_N = String(Balance_M);
          String Message_Q = Message_C + Balance_N + BDT;
          const char* Message_O = Message_Q.c_str(); 
          Serial.println(Message_O);
          TTPAFC.publish(Message_O);
          break; 
        }
        else
        {
          Serial.println(Message_T);
          Serial.println(Message_R);
                            
          TTPAFC.publish(Message_R);
          TTPAFC.publish(Message_T);                
        }      
      }
      else if(route_x == 9) {
          
          int Balance_M = Available_Balance_X - route9 ;
          
          if(Balance_M >= 0){
          EEPROM.write(2, Balance_M);
          EEPROM.commit();
          String Balance_N = String(Balance_M);
          String Message_Q = Message_C + Balance_N + BDT;
          const char* Message_O = Message_Q.c_str(); 
          Serial.println(Message_O);
          TTPAFC.publish(Message_O);
          break; 
        }
        else
        {
          Serial.println(Message_T);
          Serial.println(Message_R);
                            
          TTPAFC.publish(Message_R);
          TTPAFC.publish(Message_T);                
        }      
      }
      else if(route_x == 10) {
          
          int Balance_M = Available_Balance_X - route10 ;
          
          if(Balance_M >= 0){
          EEPROM.write(2, Balance_M);
          EEPROM.commit();
          String Balance_N = String(Balance_M);
          String Message_Q = Message_C + Balance_N + BDT;
          const char* Message_O = Message_Q.c_str(); 
          Serial.println(Message_O);
          TTPAFC.publish(Message_O);
          break; 
        }
        else
        {
          Serial.println(Message_T);
          Serial.println(Message_R);
                            
          TTPAFC.publish(Message_R);
          TTPAFC.publish(Message_T);                
        }      
      }
      else if(route_x == 11) {
          
          int Balance_M = Available_Balance_X - route11 ;
          
          if(Balance_M >= 0){
          EEPROM.write(2, Balance_M);
          EEPROM.commit();
          String Balance_N = String(Balance_M);
          String Message_Q = Message_C + Balance_N + BDT;
          const char* Message_O = Message_Q.c_str(); 
          Serial.println(Message_O);
          TTPAFC.publish(Message_O);
          break; 
        }
        else
        {
          Serial.println(Message_T);
          Serial.println(Message_R);
                            
          TTPAFC.publish(Message_R);
          TTPAFC.publish(Message_T);                
        }     
      }
      else if(route_x == 12) {
          
          int Balance_M = Available_Balance_X - route12 ;
          
          if(Balance_M >= 0){
          EEPROM.write(2, Balance_M);
          EEPROM.commit();
          String Balance_N = String(Balance_M);
          String Message_Q = Message_C + Balance_N + BDT;
          const char* Message_O = Message_Q.c_str(); 
          Serial.println(Message_O);
          TTPAFC.publish(Message_O);
          break; 
        }
        else
        {
          Serial.println(Message_T);
          Serial.println(Message_R);
                            
          TTPAFC.publish(Message_R);
          TTPAFC.publish(Message_T);                
        }      
      }
      else if(route_x == 13) {
          
          int Balance_M = Available_Balance_X - route13 ;
          
          if(Balance_M >= 0){
          EEPROM.write(2, Balance_M);
          EEPROM.commit();
          String Balance_N = String(Balance_M);
          String Message_Q = Message_C + Balance_N + BDT;
          const char* Message_O = Message_Q.c_str(); 
          Serial.println(Message_O);
          TTPAFC.publish(Message_O);
          break; 
        }
        else
        {
          Serial.println(Message_T);
          Serial.println(Message_R);
                            
          TTPAFC.publish(Message_R);
          TTPAFC.publish(Message_T);                
        }      
      }
      else if(route_x == 14) {
          
          int Balance_M = Available_Balance_X - route14 ;
          
          if(Balance_M >= 0){
          EEPROM.write(2, Balance_M);
          EEPROM.commit();
          String Balance_N = String(Balance_M);
          String Message_Q = Message_C + Balance_N + BDT;
          const char* Message_O = Message_Q.c_str(); 
          Serial.println(Message_O);
          TTPAFC.publish(Message_O);
          break; 
        } 
        else
        {
          Serial.println(Message_T);
          Serial.println(Message_R);
                            
          TTPAFC.publish(Message_R);
          TTPAFC.publish(Message_T);                
        }     
      }
      else if(route_x == 15) {
          
          int Balance_M = Available_Balance_X - route15 ;
          
          if(Balance_M >= 0){
          EEPROM.write(2, Balance_M);
          EEPROM.commit();
          String Balance_N = String(Balance_M);
          String Message_Q = Message_C + Balance_N + BDT;
          const char* Message_O = Message_Q.c_str(); 
          Serial.println(Message_O);
          TTPAFC.publish(Message_O);
          break; 
        }
        else
        {
          Serial.println(Message_T);
          Serial.println(Message_R);
                            
          TTPAFC.publish(Message_R);
          TTPAFC.publish(Message_T);                
        }      
      }
      else if(route_x == 16) {
          
          int Balance_M = Available_Balance_X - route16 ;
          
          if(Balance_M >= 0){
          EEPROM.write(2, Balance_M);
          EEPROM.commit();
          String Balance_N = String(Balance_M);
          String Message_Q = Message_C + Balance_N + BDT;
          const char* Message_O = Message_Q.c_str(); 
          Serial.println(Message_O);
          TTPAFC.publish(Message_O);
          break; 
        }
        else
        {
          Serial.println(Message_T);
          Serial.println(Message_R);
                            
          TTPAFC.publish(Message_R);
          TTPAFC.publish(Message_T);                
        }      
      }
      else if(route_x == 17) {
          
          int Balance_M = Available_Balance_X - route17 ;
          
          if(Balance_M >= 0){
          EEPROM.write(2, Balance_M);
          EEPROM.commit();
          String Balance_N = String(Balance_M);
          String Message_Q = Message_C + Balance_N + BDT;
          const char* Message_O = Message_Q.c_str(); 
          Serial.println(Message_O);
          TTPAFC.publish(Message_O);
          break; 
        }
        else
        {
          Serial.println(Message_T);
          Serial.println(Message_R);
                            
          TTPAFC.publish(Message_R);
          TTPAFC.publish(Message_T);                
        }      
      }
      else if(route_x == 18) {
          
          int Balance_M = Available_Balance_X - route18 ;
          
          if(Balance_M >= 0){
          EEPROM.write(2, Balance_M);
          EEPROM.commit();
          String Balance_N = String(Balance_M);
          String Message_Q = Message_C + Balance_N + BDT;
          const char* Message_O = Message_Q.c_str(); 
          Serial.println(Message_O);
          TTPAFC.publish(Message_O);
          break; 
        }
        else
        {
          Serial.println(Message_T);
          Serial.println(Message_R);
                            
          TTPAFC.publish(Message_R);
          TTPAFC.publish(Message_T);                
        }      
      } 
      else if(route_x == 19) {
          
          int Balance_M = Available_Balance_X - route19 ;
          
          if(Balance_M >= 0){
          EEPROM.write(2, Balance_M);
          EEPROM.commit();
          String Balance_N = String(Balance_M);
          String Message_Q = Message_C + Balance_N + BDT;
          const char* Message_O = Message_Q.c_str(); 
          Serial.println(Message_O);
          TTPAFC.publish(Message_O);
          break; 
        }
        else
        {
          Serial.println(Message_T);
          Serial.println(Message_R);
                            
          TTPAFC.publish(Message_R);
          TTPAFC.publish(Message_T);                
        }      
      }
      else if(route_x == 20) {
          
          int Balance_M = Available_Balance_X - route20 ;
          
          if(Balance_M >= 0){
          EEPROM.write(2, Balance_M);
          EEPROM.commit();
          String Balance_N = String(Balance_M);
          String Message_Q = Message_C + Balance_N + BDT;
          const char* Message_O = Message_Q.c_str(); 
          Serial.println(Message_O);
          TTPAFC.publish(Message_O);
          break; 
        }
        else
        {
          Serial.println(Message_T);
          Serial.println(Message_R);
                            
          TTPAFC.publish(Message_R);
          TTPAFC.publish(Message_T);                
        }      
      }
    }     
   
    else if (bluedata == 100) {
      int Balance_X = Available_Balance_A + 100;
      EEPROM.write(0, Balance_X);
      EEPROM.commit();
      
      Serial.println(Message_S);
      TTPAFC.publish(Message_S);                    
      } 
   }
     while (getID()){ 
                    
                    if (tagID == User_A)
                    { 
                      Serial.println("User name : A.");
                      TTPAFC.publish("User name : A.");
                      String Balance_A = String(Available_Balance_A);
                      String Message_Z = Message_A + Balance_A + BDT;
                      const char* Message_Y = Message_Z.c_str();
                      Serial.println(Message_Y);
                      TTPAFC.publish(Message_Y); 
                                 
                      if(bluedata == 0){
                        Serial.println("Journey not selected!");
                        TTPAFC.publish("Journey not selected!"); 
                        break; 
                      }
                      if(bluedata == 1){
                        int Balance_X = Available_Balance_A - route1_ticket ;
                        if(Balance_X >= 0){
                        EEPROM.write(0, Balance_X);
                        EEPROM.commit();
                        String Balance_A = String(Balance_X);
                        String Message_Z = Message_C + Balance_A + BDT;
                        const char* Message_X = Message_Z.c_str(); 
                        Serial.println(Message_X);
                        TTPAFC.publish(Message_X);
                        break; 
                      }
                      else {
                            Serial.println(Message_T);
                            Serial.println(Message_R);
                            
                            TTPAFC.publish(Message_R);
                            TTPAFC.publish(Message_T);
                           }
                      }
                      if(bluedata == 2){
                        int Balance_X = Available_Balance_A - route2_ticket ;
                        if(Balance_X >=0){
                        EEPROM.write(0, Balance_X);
                        EEPROM.commit();
                        String Balance_A = String(Balance_X);
                        String Message_Z = Message_C + Balance_A + BDT;
                        const char* Message_X = Message_Z.c_str(); 
                        Serial.println(Message_X);
                        TTPAFC.publish(Message_X);
                        break; 
                      }
                      else {
                            Serial.println(Message_T);
                            Serial.println(Message_R);
                            
                            TTPAFC.publish(Message_R);
                            TTPAFC.publish(Message_T);
                           }
                      }
                      if(bluedata == 3){
                        int Balance_X = Available_Balance_A - route3_ticket ;
                        if(Balance_X >= 0){
                        EEPROM.write(0, Balance_X);
                        EEPROM.commit();
                        String Balance_A = String(Balance_X);
                        String Message_Z = Message_C + Balance_A + BDT;
                        const char* Message_X = Message_Z.c_str(); 
                        Serial.println(Message_X);
                        TTPAFC.publish(Message_X);
                        break; 
                      }
                      else {
                            Serial.println(Message_T);
                            Serial.println(Message_R);
                            
                            TTPAFC.publish(Message_R);
                            TTPAFC.publish(Message_T);
                           }
                      }
                      if(bluedata == 4){
                        int Balance_X = Available_Balance_A - route4_ticket ;
                        if(Balance_X >= 0){
                        EEPROM.write(0, Balance_X);
                        EEPROM.commit();
                        String Balance_A = String(Balance_X);
                        String Message_Z = Message_C + Balance_A + BDT;
                        const char* Message_X = Message_Z.c_str(); 
                        Serial.println(Message_X);
                        TTPAFC.publish(Message_X);
                        break; 
                      }
                      else {
                            Serial.println(Message_T);
                            Serial.println(Message_R);
                            
                            TTPAFC.publish(Message_R);
                            TTPAFC.publish(Message_T);
                           }
                      }
                      if(bluedata == 5){
                        int Balance_X = Available_Balance_A - route5_ticket ;
                        if(Balance_X >= 0){
                        EEPROM.write(0, Balance_X);
                        EEPROM.commit();
                        String Balance_A = String(Balance_X);
                        String Message_Z = Message_C + Balance_A + BDT;
                        const char* Message_X = Message_Z.c_str(); 
                        Serial.println(Message_X);
                        TTPAFC.publish(Message_X);
                        break; 
                      }
                      else {
                            Serial.println(Message_T);
                            Serial.println(Message_R);
                            
                            TTPAFC.publish(Message_R);
                            TTPAFC.publish(Message_T);
                           }
                      }
                      if(bluedata == 6){
                        int Balance_X = Available_Balance_A - route6_ticket ;
                        if(Balance_X >= 0){
                        EEPROM.write(0, Balance_X);
                        EEPROM.commit();
                        String Balance_A = String(Balance_X);
                        String Message_Z = Message_C + Balance_A + BDT;
                        const char* Message_X = Message_Z.c_str(); 
                        Serial.println(Message_X);
                        TTPAFC.publish(Message_X);
                        break; 
                      }
                      else {
                            Serial.println(Message_T);
                            Serial.println(Message_R);
                            
                            TTPAFC.publish(Message_R);
                            TTPAFC.publish(Message_T);
                           }
                      }                                               
                      if(bluedata == 7){
                        int Balance_X = Available_Balance_A - route7_ticket ;
                        if(Balance_X >= 0){
                        EEPROM.write(0, Balance_X);
                        EEPROM.commit();
                        String Balance_A = String(Balance_X);
                        String Message_Z = Message_C + Balance_A + BDT;
                        const char* Message_X = Message_Z.c_str(); 
                        Serial.println(Message_X);
                        TTPAFC.publish(Message_X);
                        break; 
                      }
                      else {
                            Serial.println(Message_T);
                            Serial.println(Message_R);
                            
                            TTPAFC.publish(Message_R);
                            TTPAFC.publish(Message_T);
                           }
                      }
                      if(bluedata == 8){
                        int Balance_X = Available_Balance_A - route8_ticket ;
                        if(Balance_X >= 0){
                        EEPROM.write(0, Balance_X);
                        EEPROM.commit();
                        String Balance_A = String(Balance_X);
                        String Message_Z = Message_C + Balance_A + BDT;
                        const char* Message_X = Message_Z.c_str(); 
                        Serial.println(Message_X);
                        TTPAFC.publish(Message_X);
                        break; 
                      }
                      else {
                            Serial.println(Message_T);
                            Serial.println(Message_R);
                            
                            TTPAFC.publish(Message_R);
                            TTPAFC.publish(Message_T);
                           }
                      }
                      if(bluedata == 9){
                        int Balance_X = Available_Balance_A - route9_ticket ;
                        if(Balance_X >= 0){
                        EEPROM.write(0, Balance_X);
                        EEPROM.commit();
                        String Balance_A = String(Balance_X);
                        String Message_Z = Message_C + Balance_A + BDT;
                        const char* Message_X = Message_Z.c_str(); 
                        Serial.println(Message_X);
                        TTPAFC.publish(Message_X);
                        break; 
                      }
                      else {
                            Serial.println(Message_T);
                            Serial.println(Message_R);
                            
                            TTPAFC.publish(Message_R);
                            TTPAFC.publish(Message_T);
                           }
                      }
                      if(bluedata == 10){
                        int Balance_X = Available_Balance_A - route10_ticket ;
                        if(Balance_X >= 0){
                        EEPROM.write(0, Balance_X);
                        EEPROM.commit();
                        String Balance_A = String(Balance_X);
                        String Message_Z = Message_C + Balance_A + BDT;
                        const char* Message_X = Message_Z.c_str(); 
                        Serial.println(Message_X);
                        TTPAFC.publish(Message_X);
                        break; 
                      }
                      else {
                            Serial.println(Message_T);
                            Serial.println(Message_R);
                            
                            TTPAFC.publish(Message_R);
                            TTPAFC.publish(Message_T);
                           }
                      }
                      if(bluedata == 11){
                        int Balance_X = Available_Balance_A - route11_ticket ;
                        if(Balance_X >= 0){
                        EEPROM.write(0, Balance_X);
                        EEPROM.commit();
                        String Balance_A = String(Balance_X);
                        String Message_Z = Message_C + Balance_A + BDT;
                        const char* Message_X = Message_Z.c_str(); 
                        Serial.println(Message_X);
                        TTPAFC.publish(Message_X);
                        break; 
                      }
                      else {
                            Serial.println(Message_T);
                            Serial.println(Message_R);
                            
                            TTPAFC.publish(Message_R);
                            TTPAFC.publish(Message_T);
                           }
                      }
                      if(bluedata == 12){
                        int Balance_X = Available_Balance_A - route12_ticket ;
                        if(Balance_X >= 0){
                        EEPROM.write(0, Balance_X);
                        EEPROM.commit();
                        String Balance_A = String(Balance_X);
                        String Message_Z = Message_C + Balance_A + BDT;
                        const char* Message_X = Message_Z.c_str(); 
                        Serial.println(Message_X);
                        TTPAFC.publish(Message_X);
                        break; 
                      }
                      else {
                            Serial.println(Message_T);
                            Serial.println(Message_R);
                            
                            TTPAFC.publish(Message_R);
                            TTPAFC.publish(Message_T);
                           }
                      }
                       if(bluedata == 13){
                        int Balance_X = Available_Balance_A - route13_ticket ;
                        if(Balance_X >= 0){
                        EEPROM.write(0, Balance_X);
                        EEPROM.commit();
                        String Balance_A = String(Balance_X);
                        String Message_Z = Message_C + Balance_A + BDT;
                        const char* Message_X = Message_Z.c_str(); 
                        Serial.println(Message_X);
                        TTPAFC.publish(Message_X);
                        break; 
                      }
                      else {
                            Serial.println(Message_T);
                            Serial.println(Message_R);
                            
                            TTPAFC.publish(Message_R);
                            TTPAFC.publish(Message_T);
                           }
                      }
                       if(bluedata == 14){
                        int Balance_X = Available_Balance_A - route14_ticket ;
                        if(Balance_X >= 0){
                        EEPROM.write(0, Balance_X);
                        EEPROM.commit();
                        String Balance_A = String(Balance_X);
                        String Message_Z = Message_C + Balance_A + BDT;
                        const char* Message_X = Message_Z.c_str(); 
                        Serial.println(Message_X);
                        TTPAFC.publish(Message_X);
                        break; 
                      }
                      else {
                            Serial.println(Message_T);
                            Serial.println(Message_R);
                            
                            TTPAFC.publish(Message_R);
                            TTPAFC.publish(Message_T);
                           }
                      }
                      if(bluedata == 15){
                        int Balance_X = Available_Balance_A - route15_ticket ;
                        if(Balance_X >= 0){
                        EEPROM.write(0, Balance_X);
                        EEPROM.commit();
                        String Balance_A = String(Balance_X);
                        String Message_Z = Message_C + Balance_A + BDT;
                        const char* Message_X = Message_Z.c_str(); 
                        Serial.println(Message_X);
                        TTPAFC.publish(Message_X);
                        break; 
                      }
                      else {
                            Serial.println(Message_T);
                            Serial.println(Message_R);
                            
                            TTPAFC.publish(Message_R);
                            TTPAFC.publish(Message_T);
                           }
                      }
                      if(bluedata == 16){
                        int Balance_X = Available_Balance_A - route16_ticket ;
                        if(Balance_X >= 0){
                        EEPROM.write(0, Balance_X);
                        EEPROM.commit();
                        String Balance_A = String(Balance_X);
                        String Message_Z = Message_C + Balance_A + BDT;
                        const char* Message_X = Message_Z.c_str(); 
                        Serial.println(Message_X);
                        TTPAFC.publish(Message_X);
                        break; 
                      }
                      else {
                            Serial.println(Message_T);
                            Serial.println(Message_R);
                            
                            TTPAFC.publish(Message_R);
                            TTPAFC.publish(Message_T);
                           }
                      }
                      if(bluedata == 17){
                        int Balance_X = Available_Balance_A - route17_ticket ;
                        if(Balance_X >= 0){
                        EEPROM.write(0, Balance_X);
                        EEPROM.commit();
                        String Balance_A = String(Balance_X);
                        String Message_Z = Message_C + Balance_A + BDT;
                        const char* Message_X = Message_Z.c_str(); 
                        Serial.println(Message_X);
                        TTPAFC.publish(Message_X);
                        break; 
                      }
                      else {
                            Serial.println(Message_T);
                            Serial.println(Message_R);
                            
                            TTPAFC.publish(Message_R);
                            TTPAFC.publish(Message_T);
                           }
                      }
                      if(bluedata == 18){
                        int Balance_X = Available_Balance_A - route18_ticket ;
                        if(Balance_X >= 0){
                        EEPROM.write(0, Balance_X);
                        EEPROM.commit();
                        String Balance_A = String(Balance_X);
                        String Message_Z = Message_C + Balance_A + BDT;
                        const char* Message_X = Message_Z.c_str(); 
                        Serial.println(Message_X);
                        TTPAFC.publish(Message_X);
                        break; 
                      }
                      else {
                            Serial.println(Message_T);
                            Serial.println(Message_R);
                            
                            TTPAFC.publish(Message_R);
                            TTPAFC.publish(Message_T);
                           }
                      }
                      if(bluedata == 19){
                        int Balance_X = Available_Balance_A - route19_ticket ;
                        if(Balance_X >= 0){
                        EEPROM.write(0, Balance_X);
                        EEPROM.commit();
                        String Balance_A = String(Balance_X);
                        String Message_Z = Message_C + Balance_A + BDT;
                        const char* Message_X = Message_Z.c_str(); 
                        Serial.println(Message_X);
                        TTPAFC.publish(Message_X);
                        break; 
                      }
                      else {
                            Serial.println(Message_T);
                            Serial.println(Message_R);
                            
                            TTPAFC.publish(Message_R);
                            TTPAFC.publish(Message_T);
                           }
                      }
                      if(bluedata == 20){
                        int Balance_X = Available_Balance_A - route20_ticket ;
                        if(Balance_X >= 0){
                        EEPROM.write(0, Balance_X);
                        EEPROM.commit();
                        String Balance_A = String(Balance_X);
                        String Message_Z = Message_C + Balance_A + BDT;
                        const char* Message_X = Message_Z.c_str(); 
                        Serial.println(Message_X);
                        TTPAFC.publish(Message_X);
                        break; 
                      }
                      else {
                            Serial.println(Message_T);
                            Serial.println(Message_R);

                            TTPAFC.publish(Message_R);
                            TTPAFC.publish(Message_T);
                           }
                      }                                                                                                             
                    }
                                     
                    else
                    {
                     Serial.println("Card Invalid!");
                     TTPAFC.publish("Card Invalid!");  
                    }                    
         break;
     }
   
}


/****************************************************************************************************************************************************************************************************************************************************************************/
/****************************************************************************************************************************************************************************************************************************************************************************/

void MQTT_connect() 
 
  {  
  int8_t ret;
  if (mqtt.connected()) {
    return;
  }
  
  Serial.print("Connecting to MQTT... ");

  uint8_t retries = 3;
  
  while ((ret = mqtt.connect()) != 0) {
    Serial.println(mqtt.connectErrorString(ret));
    Serial.println("Retrying MQTT connection in 5 seconds...");
    mqtt.disconnect();
    delay(5000); 
    retries--;
    if (retries == 0) {
      while (1);
    }
   }
   Serial.println("MQTT Connected!\n");
  }

/****************************************************************************************************************************************************************************************************************************************************************************/
/****************************************************************************************************************************************************************************************************************************************************************************/

boolean getID() 
{
  if ( ! mfrc522.PICC_IsNewCardPresent()) {
  return false;
  }
  if ( ! mfrc522.PICC_ReadCardSerial()) {
  return false;
  }
  tagID = "";
  for ( uint8_t i = 0; i < 4; i++) {
  tagID.concat(String(mfrc522.uid.uidByte[i], HEX));
  }
  tagID.toUpperCase();
  mfrc522.PICC_HaltA();
  return true;
} 
